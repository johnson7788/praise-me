import uuid
import os
import logging
from datetime import datetime, timedelta
from fastapi import FastAPI, HTTPException, UploadFile, Form, Depends,Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
from gtts import gTTS
import openai
from dotenv import load_dotenv
import uvicorn
from pydantic import BaseModel
from typing import Optional, List
import aiomysql
from aiomysql import Pool

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [%(levelname)s] - %(module)s - %(funcName)s - %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)

# Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
load_dotenv(dotenv_path=".env")

# Êï∞ÊçÆÂ∫ìÊ®°Âûã
class User(BaseModel):
    user_id: str
    username: str

class PraiseRecord(BaseModel):
    record_id: str
    user_id: str
    praise_type: str
    content: str
    style: Optional[str] = None
    created_at: datetime

class ChallengeRecord(BaseModel):
    challenge_id: str
    user_id: str
    challenge_type: str
    completed_at: datetime

# ÂàùÂßãÂåñFastAPI
app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# CORSÈÖçÁΩÆ
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# ÁéØÂ¢ÉÂèòÈáè
LLM_MODEL_NAME = os.getenv("LLM_MODEL_NAME")
LLM_BASE_URL = os.getenv("LLM_BASE_URL")
LLM_API_KEY = os.getenv("LLM_API_KEY")
DB_CONFIG = {
    "host": os.getenv("DB_HOST"),
    "port": int(os.getenv("DB_PORT")),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "db": os.getenv("DB_NAME"),
    "autocommit": True
}

# Êï∞ÊçÆÂ∫ìËøûÊé•Ê±†
pool: Pool = None

LANGUAGE_MAP = {
    "zh": "‰∏≠Êñá",
    "en": "English",
    "ja": "Japanese",
    "ko": "Korean"
}

@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üöÄ ÊúçÂä°Âô®ÂêØÂä®‰∏≠...")
    global pool
    pool = await aiomysql.create_pool(**DB_CONFIG)
    # ËøôÈáåÂèØ‰ª•ËøõË°åÊï∞ÊçÆÂ∫ìËøûÊé•„ÄÅÂàùÂßãÂåñÁºìÂ≠òÁ≠â
    yield  # ËøôÈáåÊòØ FastAPI ËøêË°åÁöÑÊó∂Èó¥
    print("üõë ÊúçÂä°Âô®Ê≠£Âú®ÂÖ≥Èó≠...")
    # ËøôÈáåÂèØ‰ª•ËøõË°åÊ∏ÖÁêÜÊìç‰ΩúÔºåÊØîÂ¶ÇÂÖ≥Èó≠Êï∞ÊçÆÂ∫ìËøûÊé•Á≠â
    pool.close()
    await pool.wait_closed()

# ÈÄöÁî®ÁîüÊàêÈÄªËæë
async def generate_praise_logic(input_text: str, style: str = "normal", language: str = "zh"):
    """
    ÁîüÊàêÂ§∏Â§∏ÁöÑÂÜÖÂÆπ
    input_text: Áî®Êà∑ËæìÂÖ•
    """
    styles = {
        "normal": "Ê∏©ÊöñÁúüËØö",
        "funny": "ÂπΩÈªòÊêûÁ¨ë",
        "poetic": "ÂîêËØóÂÆãËØçÈ£éÊ†º",
        "zhonger": "‰∏≠‰∫åÁÉ≠Ë°ÄËØ≠Ê∞î",
        "domineering": "Èú∏ÈÅìÊÄªË£ÅÂè£Âêª"
    }
    language_name = LANGUAGE_MAP.get(language, "‰∏≠Êñá")
    logging.info(f"Áî®Êà∑ËæìÂÖ•{input_text}ÔºåÈ£éÊ†º{style}ÔºåËØ≠Ë®Ä{language_name}")
    try:
        client = openai.OpenAI(api_key=LLM_API_KEY, base_url=LLM_BASE_URL)
        prompt = f"""‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÂ§∏Â§∏Âä©ÊâãÔºåÊ†πÊçÆ‰ª•‰∏ãË¶ÅÊ±ÇÁîüÊàêÈºìÂä±Ôºö
        ËæìÂÖ•ÂÜÖÂÆπÔºö{input_text}
        È£éÊ†ºË¶ÅÊ±ÇÔºö{styles.get(style, styles['normal'])}
        ËæìÂá∫Ë¶ÅÊ±ÇÔºö100Â≠ó‰ª•ÂÜÖÔºå‰ΩøÁî®{language_name}ÔºåÈÅøÂÖçÊïèÊÑüËØç
        """
        response = client.chat.completions.create(
            model=LLM_MODEL_NAME,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        content = response.choices[0].message.content
        logging.info(f"Ê®°Âºè: {style}, ËæìÂÖ•{input_text}ÔºåÁîüÊàêÁªìÊûú: {content}")
        result = {"text": content}
        return JSONResponse(content=result, headers={"Content-Type": "application/json; charset=utf-8"})
    except Exception as e:
        raise HTTPException(500, f"ÁîüÊàêÂ§±Ë¥•: {str(e)}")

async def analyze_image(image_path: str) -> str:
    """Ë∞ÉÁî®ÂõæÂÉèËØÜÂà´APIÁîüÊàêÊèèËø∞"""
    # ËøôÈáåÈúÄË¶ÅÂÆûÁé∞ÂÖ∑‰ΩìÁöÑÂõæÂÉèËØÜÂà´ÈÄªËæëÔºå‰æãÂ¶Ç‰ΩøÁî®GPT-4VÊàñCLIP
    return "‰∏ÄÂº†ÂÖÖÊª°Ê¥ªÂäõÁöÑÁÖßÁâáÔºåÂ±ïÁé∞Âá∫ÁßØÊûÅÂêë‰∏äÁöÑÁîüÊ¥ªÊÄÅÂ∫¶"

# Êï∞ÊçÆÂ∫ìÊìç‰ΩúÁ±ª
class Database:
    @staticmethod
    async def execute_query(query, params=None):
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute(query, params or ())
                return cur

# Ê†∏ÂøÉÂäüËÉΩAPI
class PraiseRequest(BaseModel):
    text: Optional[str] = None
    style: str = "normal"
    language: Optional[str] = "zh" # ÈªòËÆ§‰∏∫‰∏≠Êñá,ÂèØÈÄâÂÖ∂ÂÆÉËØ≠Ë®ÄÔºå‰æãÂ¶ÇÊó•ËØ≠ÔºåËã±ËØ≠Á≠â

class DirectRequest(BaseModel):
    language: Optional[str] = "zh"

@app.post("/direct-praise")
async def direct_praise(request: DirectRequest):
    """Áõ¥Êé•Â§∏Ê®°Âºè"""
    default_prompt = "ËØ∑ÈöèÊú∫ÁîüÊàê‰∏Ä‰∏™Ê≠£ËÉΩÈáèÁöÑÂ§∏ËµûÔºåÈù¢ÂêëÊôÆÈÄöÁî®Êà∑ÁöÑÊó•Â∏∏ÈºìÂä±"
    return await generate_praise_logic(default_prompt, language=request.language)

@app.post("/hint-praise")
async def hint_praise(request: PraiseRequest):
    """ÊèêÁ§∫Â§∏Ê®°Âºè"""
    if not request.text:
        raise HTTPException(400, "ËØ∑ËæìÂÖ•ÊèêÁ§∫ÂÜÖÂÆπ")
    return await generate_praise_logic(request.text, request.style)

@app.post("/photo-praise")
async def photo_praise(
    file: UploadFile,
    style: str = Form("normal")
):
    """ÊãçÊãçÂ§∏Ê®°Âºè"""
    try:
        # ‰øùÂ≠ò‰∏ä‰º†Êñá‰ª∂
        file_path = f"static/uploads/{uuid.uuid4()}.jpg"
        with open(file_path, "wb") as buffer:
            buffer.write(await file.read())
        
        # Ë∞ÉÁî®ÂõæÂÉèËØÜÂà´API
        image_desc = await analyze_image(file_path)
        return await generate_praise_logic(image_desc, style)
    except Exception as e:
        raise HTTPException(500, f"ÂõæÁâáÂ§ÑÁêÜÂ§±Ë¥•: {str(e)}")

@app.post("/style-praise")
async def style_praise(request: PraiseRequest):
    """È£éÊ†ºÂ§∏Ê®°Âºè"""
    return await generate_praise_logic(request.text, request.style)

# ËØ≠Èü≥ÁîüÊàê
@app.post("/generate-voice")
async def generate_voice(text: str = Form(...)):
    try:
        filename = f"static/audio/{uuid.uuid4()}.mp3"
        tts = gTTS(text=text, lang='zh-cn')
        tts.save(filename)
        return FileResponse(filename, media_type="audio/mpeg")
    except Exception as e:
        raise HTTPException(500, f"ËØ≠Èü≥ÁîüÊàêÂ§±Ë¥•: {str(e)}")

# Á§æÂå∫‰∫íÂä®API
@app.post("/challenge/complete")
async def complete_challenge(user_id: str = Form(...), challenge_type: str = Form(...)):
    """ÂÆåÊàêÊØèÊó•ÊåëÊàò"""
    try:
        await Database.execute_query(
            "INSERT INTO challenges (challenge_id, user_id, challenge_type) VALUES (%s, %s, %s)",
            (str(uuid.uuid4()), user_id, challenge_type)
        )
        return {"status": "success"}
    except Exception as e:
        raise HTTPException(500, f"ËÆ∞ÂΩïÊåëÊàòÂ§±Ë¥•: {str(e)}")

@app.get("/leaderboard")
async def get_leaderboard(period: str = "daily"):
    """Ëé∑ÂèñÂ§∏Â§∏ÊéíË°åÊ¶ú"""
    time_filter = {
        "daily": datetime.now() - timedelta(days=1),
        "weekly": datetime.now() - timedelta(weeks=1),
        "monthly": datetime.now() - timedelta(days=30)
    }.get(period, datetime.now() - timedelta(days=1))
    
    try:
        async with pool.acquire() as conn:
            async with conn.cursor(aiomysql.DictCursor) as cur:
                await cur.execute("""
                    SELECT user_id, COUNT(*) as praise_count 
                    FROM praise_records 
                    WHERE created_at > %s
                    GROUP BY user_id 
                    ORDER BY praise_count DESC 
                    LIMIT 20
                """, (time_filter,))
                result = await cur.fetchall()
                return {"leaderboard": result}
    except Exception as e:
        raise HTTPException(500, f"Ëé∑ÂèñÊéíË°åÊ¶úÂ§±Ë¥•: {str(e)}")

@app.api_route("/ping", methods=["GET", "POST"])
async def ping(request: Request):
    return "Pong"

if __name__ == "__main__":
    uvicorn.run(app, host='0.0.0.0', port=6002)